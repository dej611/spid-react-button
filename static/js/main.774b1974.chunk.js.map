{"version":3,"sources":["../../dist/spid-ico-circle-lb~LegQefra.svg","../../dist/spid-ico-circle-bb~bpKzRdOW.svg","../../dist/spid-idp-arubaid~fDCrPIuZ.svg","../../dist/spid-idp-infocertid~JLhnsDVw.svg","../../dist/spid-idp-intesaid~glAewdml.svg","../../dist/spid-idp-lepidaid~dCTXtmlW.svg","../../dist/spid-idp-namirialid~bnBhXfMj.svg","../../dist/spid-idp-posteid~FrEkbJeb.svg","../../dist/spid-idp-spiditalia~twlNutJN.svg","../../dist/spid-idp-sielteid~NGcEfmPl.svg","../../dist/spid-idp-teamsystemid~AAkvCNst.svg","../../dist/spid-idp-timid~TYZrrAeh.svg","../../dist/spid-logo~zJjEzXFQ.svg","../../dist/close~hKFpNpUn.svg","../../dist/spid-logo-animation-black~ZYbHBrkh.svg","../../src/shared/providers.tsx","../../src/shared/utils.ts","../../src/shared/i18n.ts","../../src/modalVariant/constants.tsx","../../src/modalVariant/utils.tsx","../../src/shared/ProviderButton.tsx","../../src/modalVariant/ProvidersModal.tsx","../../src/modalVariant/index.tsx","../../src/dropdownVariant/constants.ts","../../src/dropdownVariant/util.tsx","../../src/dropdownVariant/ProvidersMenu.tsx","../../src/dropdownVariant/index.tsx","../../src/component.tsx","Header.tsx","constants.ts","BISelect.tsx","Configurator.tsx","EventsTable.tsx","CodeEditor.tsx","CodeRenderer.tsx","DocTable.tsx","App.tsx","index.tsx"],"names":["module","exports","images","providers","Object","idA","idB","protocols","entityName","entityID","active","logo","i","SPID_URL","mergeProviders","extraProviders","sorted","mergedList","length","idp","idpA","idpB","validateURL","url","Error","providersCopy","JSON","getShuffledProviders","Math","isProviderActive","supported","protocol","isExtraProviders","translations","naviga_indietro","it","en","de","es","fr","alt_logo_SPID","scegli_provider_SPID","annulla_accesso","non_hai_SPID","cosa_SPID","entra_con_SPID","scopri_di_piu","accedi_con_idp","idp_disabled","maggiori_info","placeholderRegex","currentLang","getTranslationFn","language","text","placeholderValue","possibleStates","INIT","type","ENTERING","ENTERED","EXITING","EXITED","sizeMapping","sm","md","l","getDefinedClasses","klasses","klass","styles","extraStyles","emptyClasses","isVisible","modalState","SharedProviderButton","configuration","isActive","mapping","i18n","onProviderClicked","className","firstFocus","idpRef","useRef","actionURL","encodeURIComponent","linkTitle","loginURL","useEffect","isGetMethod","ref","title","href","disabled","onClick","role","id","name","action","method","e","fieldName","value","inputName","inputValue","key","ProviderButtonContent","React","src","alt","style","maxWidth","ButtonImage","altText","float","ProvidersModal","visibility","closeModal","panel","buttonLogo","buttonClose","buttonManIcon","getModalClasses","panelClasses","buttonCloseClasses","buttonLogoClasses","buttonManIconClasses","onClickOutside","onEscapeKey","enabled","hidden","tabIndex","SpidLogoUrl","CloseSvgUrl","SpidLogoAnimationBlackUrl","classNames","animationDelay","target","providersList","LoginButton","theme","corners","fluid","size","toggleModal","modalVisibility","customStylingClasses","computeButtonClasses","console","computeButtonTransitionClasses","wrapper","icon","wrapperTransitionClasses","iconButtonClasses","buttonImageUrl","SPIDReactButton","lang","onProvidersShown","onProvidersHidden","useState","state","setState","timer","setTimeout","clearTimeout","translateFn","moreLoginProps","moreModalProps","mergedProviders","open","xl","getButtonSizeClass","getIdpButtonSizeClass","currentSize","ProvidersDropdown","idpButtonMenu","buttonClasses","supportLink","shuffledProviders","openDropdown","toggleDropdown","scrollLock","container","buttonIcon","buttonText","props","AppHeader","iconName","tag","aria-label","color","padding","defaultURL","sort","localeCompare","languages","configurations","sizes","colorThemes","cornerTypes","types","initState","slice","map","Option","DropdownIndicator","aria-hidden","generatedIds","idGenerator","label","SelectComponent","options","onChange","selectedValue","htmlFor","components","IndicatorSeparator","provided","height","valueContainer","control","placeholder","classNamePrefix","getOptionsAndCurrentSelection","labels","currentState","prop","outputOptions","currentSelection","find","selection","Configurator","buttonProps","updateProp","setValidURL","isValidURL","langOptions","langSelection","sizeOptions","sizeSelection","colorSchemeOptions","colorThemeSelection","protocolOptions","protocolSelection","cornerTypeOptions","cornerTypeSelection","methodOptions","methodSelection","typeOptions","typeSelection","validProps","valid","invalid","Col","infoText","event","newURL","indexOf","FormGroup","selectedOption","includes","check","checked","Row","isChecked","filter","Label","EventsTable","events","scope","arg","makePartOfApp","code","replace","CodeEditorLink","SyntaxHighlighter","registerLanguage","jsx","css","bash","CodeRenderer","entries","Array","isArray","every","v","isDefaultProp","stringify","join","showLineNumbers","wrapLines","vs","GenericCodeRenderer","payload","DocTable","doc","setDoc","ms","Promise","all","fetch","process","then","response","r","markdown","catch","stroke","strokeOpacity","App","setProps","setEvents","updateStateProp","useCallback","newValue","prevState","prependEvent","newEvent","Container","toUpperCase","preventDefault","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.774b1974.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spid-ico-circle-lb~LegQefra.27197b71.svg\";","module.exports = __webpack_public_path__ + \"static/media/spid-ico-circle-bb~bpKzRdOW.742f2939.svg\";","module.exports = __webpack_public_path__ + \"static/media/spid-idp-arubaid~fDCrPIuZ.123f6a53.svg\";","module.exports = __webpack_public_path__ + \"static/media/spid-idp-infocertid~JLhnsDVw.d7a80b7c.svg\";","module.exports = __webpack_public_path__ + \"static/media/spid-idp-intesaid~glAewdml.72eb7819.svg\";","module.exports = __webpack_public_path__ + \"static/media/spid-idp-lepidaid~dCTXtmlW.04c399c5.svg\";","module.exports = __webpack_public_path__ + \"static/media/spid-idp-namirialid~bnBhXfMj.d31e0773.svg\";","module.exports = __webpack_public_path__ + \"static/media/spid-idp-posteid~FrEkbJeb.1075a640.svg\";","module.exports = __webpack_public_path__ + \"static/media/spid-idp-spiditalia~twlNutJN.7cf9ecba.svg\";","module.exports = __webpack_public_path__ + \"static/media/spid-idp-sielteid~NGcEfmPl.0c44d502.svg\";","module.exports = __webpack_public_path__ + \"static/media/spid-idp-teamsystemid~AAkvCNst.0c91abfe.svg\";","module.exports = __webpack_public_path__ + \"static/media/spid-idp-timid~TYZrrAeh.8d1eea23.svg\";","module.exports = __webpack_public_path__ + \"static/media/spid-logo~zJjEzXFQ.b5234f51.svg\";","module.exports = __webpack_public_path__ + \"static/media/close~hKFpNpUn.f2ec1f7d.svg\";","module.exports = __webpack_public_path__ + \"static/media/spid-logo-animation-black~ZYbHBrkh.3fe355c4.svg\";","import ArubaSVGUrl from '/./svgs/idp-logos/spid-idp-arubaid.svg';\nimport InfocertSVGUrl from '/./svgs/idp-logos/spid-idp-infocertid.svg';\nimport PosteSVGUrl from '/./svgs/idp-logos/spid-idp-posteid.svg';\nimport SielteSVGUrl from '/./svgs/idp-logos/spid-idp-sielteid.svg';\nimport TimSVGUrl from '/./svgs/idp-logos/spid-idp-timid.svg';\nimport NamirialSVGUrl from '/./svgs/idp-logos/spid-idp-namirialid.svg';\nimport RegisterItSVGUrl from '/./svgs/idp-logos/spid-idp-spiditalia.svg';\nimport IntesaSVGUrl from '/./svgs/idp-logos/spid-idp-intesaid.svg';\nimport LepidaSVGUrl from '/./svgs/idp-logos/spid-idp-lepidaid.svg';\nimport TeamSystemSVGUrl from '/./svgs/idp-logos/spid-idp-teamsystemid.svg';\n\nimport providersList from './providers_meta.json';\n\nimport type { RegisteredProviderRecord } from './types';\n\n/**\n * This array of images has been carefully ordered alphabetically\n * to do the matching with the metadata from json, until\n * https://github.com/italia/spid-sp-access-button/issues/7 gets resolved\n */\nconst images = [\n  ArubaSVGUrl,\n  InfocertSVGUrl,\n  IntesaSVGUrl,\n  LepidaSVGUrl,\n  NamirialSVGUrl,\n  PosteSVGUrl,\n  RegisterItSVGUrl,\n  SielteSVGUrl,\n  TeamSystemSVGUrl,\n  TimSVGUrl\n];\n\nexport const providers: Readonly<RegisteredProviderRecord>[] = Object.entries(\n  providersList\n)\n  .sort(([idA], [idB]) => idA.localeCompare(idB))\n  .map(([entityName, entityID], i) => ({\n    protocols: ['SAML'],\n    entityName,\n    entityID,\n    active: true,\n    logo: images[i]\n  }));\n","import { ProviderRecord } from '..';\nimport { providers } from './providers';\nimport {\n  ConfigurationGET,\n  ConfigurationPOST,\n  Protocols,\n  RegisteredProviderRecord\n} from './types';\n\n// avoid http/https confusion and centralize this URL\nexport const SPID_URL = 'https://www.spid.gov.it';\n\nexport function mergeProviders(\n  providers: Readonly<RegisteredProviderRecord>[],\n  extraProviders: ProviderRecord[],\n  { sorted }: { sorted?: boolean } = {}\n): RegisteredProviderRecord[] {\n  const mergedList = [\n    ...providers.map((idp) => ({\n      ...idp,\n      active: !extraProviders.length\n    })),\n    ...extraProviders.map((idp) => ({\n      ...idp,\n      protocols: idp.protocols ?? ['SAML'],\n      active: true\n    }))\n  ];\n  if (!sorted) {\n    return mergedList;\n  }\n  return mergedList.sort((idpA, idpB) =>\n    idpA.entityName.localeCompare(idpB.entityName)\n  );\n}\n\nexport function validateURL(url: string | undefined) {\n  if (url == null || url.indexOf('{{idp}}') < 0) {\n    throw Error('URL parameter must contain the \"{{idp}} string');\n  }\n}\n\nexport function isGetMethod(\n  configuration: ConfigurationGET | ConfigurationPOST\n): configuration is ConfigurationGET {\n  return configuration.method.toUpperCase() === 'GET';\n}\n\nfunction dirtyCopy<T>(obj: T): T {\n  return JSON.parse(JSON.stringify(obj));\n}\n// Used for exporting\n/**\n * Returns a copy of the list of the official providers.\n * @private\n */\nexport const providersCopy = dirtyCopy(providers) as RegisteredProviderRecord[];\n\n/**\n * Returns a copy of the list of the official providers, already shuffled\n */\nexport function getShuffledProviders() {\n  return providersCopy.sort(() => Math.random() - 0.5);\n}\n\nexport function isProviderActive(\n  idp: RegisteredProviderRecord,\n  supported: string[],\n  protocol: Protocols,\n  extraProviders: ProviderRecord[]\n) {\n  const isExtraProviders = extraProviders.some(\n    ({ entityID }) => entityID === idp.entityID\n  );\n  return (\n    supported.indexOf(idp.entityID) > -1 &&\n    idp.protocols.indexOf(protocol) > -1 &&\n    (extraProviders.length === 0 || isExtraProviders) &&\n    idp.active\n  );\n}\n","import type { Languages } from './types';\n\nconst translations = {\n  naviga_indietro: {\n    it: 'Torna indietro',\n    en: 'Go back',\n    de: 'Gehen Sie zurück',\n    es: 'Regresar',\n    fr: 'Revenir'\n  },\n  alt_logo_SPID: {\n    it: 'Logo SPID',\n    en: 'Logo SPID',\n    de: 'Logo SPID',\n    es: 'Logo SPID',\n    fr: 'Logo SPID'\n  },\n  scegli_provider_SPID: {\n    it: 'Scegli il tuo provider SPID',\n    en: 'Choose your SPID provider',\n    de: 'Wähle Ihren SPIDProvider',\n    es: 'Escoge tu proveedor SPID',\n    fr: 'Choisissez votre fournisseur SPID'\n  },\n  annulla_accesso: {\n    it: 'Annulla',\n    en: 'Cancel',\n    de: 'Zurücknehmen',\n    es: 'Cancelar',\n    fr: 'Annuler'\n  },\n  non_hai_SPID: {\n    it: 'Non hai SPID?',\n    en: \"Don't have SPID?\",\n    de: 'Haben Sie nicht SPID?',\n    es: 'No tiene SPID?',\n    fr: \"Vous ñ'avez pas de SPID?\"\n  },\n  cosa_SPID: {\n    it: \"Cos'è SPID?\",\n    en: 'What is SPID?',\n    de: 'Was ist SPID?',\n    es: 'Qué es SPID?',\n    fr: 'Qu’est-ce que SPID?'\n  },\n  entra_con_SPID: {\n    it: 'Entra con SPID',\n    en: 'Sign in with SPID',\n    de: 'Loggen Sie mit SPID',\n    es: 'Ingresa con SPID',\n    fr: 'Connectez-vous avec SPID'\n  },\n  scopri_di_piu: {\n    it: 'Scopri di più.',\n    en: 'Learn more.',\n    de: 'Finde mehr heraus.',\n    es: 'Saber más',\n    fr: 'En savoir plus.'\n  },\n  accedi_con_idp: {\n    it: 'Accedi a SPID con {0}',\n    en: 'Access to SPID with {0}',\n    de: 'Zugriff auf SPID mit {0}',\n    es: 'Accede a SPID con {0}',\n    fr: 'Accès à SPID avec {0}'\n  },\n  idp_disabled: {\n    it: 'Provider non attivo',\n    en: 'Provider not enabled',\n    de: 'Provider nicht aktiviert',\n    es: 'Proveedor no disponible',\n    fr: 'Fournisseur non activé'\n  },\n  maggiori_info: {\n    it: 'Maggiori info',\n    en: 'More info',\n    de: 'Mehr info',\n    es: 'Más información',\n    fr: 'Plus d’info'\n  }\n} as const;\nconst placeholderRegex = /\\{\\d}/;\n\nexport type labelKeys = keyof typeof translations;\n\nexport type TranslateFn = (\n  labelKey: labelKeys,\n  placeholderValue?: string\n) => string;\n\nlet currentLang = 'it';\nexport const getTranslationFn = (language: Languages): TranslateFn => {\n  currentLang = language;\n  return (labelKey: labelKeys, placeholderValue?: string) => {\n    const text = translations[labelKey] && translations[labelKey][currentLang];\n    if (!text) {\n      throw Error(\n        `labelKey ${labelKey} non presente per la lingua selezionata ${currentLang}`\n      );\n    }\n    if (placeholderValue != null) {\n      return text.replace(placeholderRegex, placeholderValue);\n    }\n    return text;\n  };\n};\n/**\n * Returns the list of supported languages for the UI\n */\nexport const getSupportedLanguages = (): Languages[] =>\n  Object.keys(Object.values(translations)[0]) as Languages[];\n","export const DEFAULT_TRANSITION_TIME = 2000;\nexport const BUTTON_DELAY_TIME = 1.1;\nexport const DELAY_STEP = 0.1;\n\nexport const possibleStates = {\n  INIT: { type: 'init' },\n  ENTERING: { type: 'entering' },\n  ENTERED: { type: 'entered' },\n  EXITING: { type: 'exiting' },\n  EXITED: { type: 'exited' }\n} as const;\n\nexport const panelAnimClass = 'spid-button-panel-anim';\nexport const logoAnimationOutClass = 'spid-button-logo-animation-out';\nexport const emptyClass = '';\nexport const buttonIconAnimationClass = 'spid-button-icon-animation';\n\nexport const sizeMapping = {\n  sm: 'small',\n  md: 'medium',\n  l: 'large'\n};\n","import { SPIDButtonProps } from '../shared/types';\nimport {\n  buttonIconAnimationClass,\n  possibleStates,\n  sizeMapping,\n  emptyClass\n} from './constants';\nimport { ModalState } from './types';\n\nimport styles from './index.module.css';\nimport extraStyles from './extra.module.css';\n\n// the css module is fake for the modal, so we can just centralize the renaming logic here\nexport function getDefinedClasses(klasses: (string | undefined)[]) {\n  return klasses\n    .map(\n      (klass) => (klass && (styles[klass] || extraStyles[klass])) || emptyClass\n    )\n    .join(' ');\n}\n\n// do not wrap these results with the getDefinedClasses yet as they will be wrapped later on\n// on the components\ntype classesProps = Pick<\n  SPIDButtonProps,\n  'theme' | 'corners' | 'size' | 'fluid'\n>;\nexport function computeButtonClasses({\n  theme,\n  corners,\n  size,\n  fluid\n}: classesProps): string[] {\n  if (process.env.NODE_ENV === 'production') {\n    if (size === 'xl') {\n      console.log(\n        'Size \"xl\" is not supported by SPID React Button with Modal variant'\n      );\n    }\n  }\n  return [\n    theme,\n    corners,\n    size ? `size-${sizeMapping[size] || 'large'}` : null,\n    fluid ? 'fluid' : null\n  ]\n    .map((type) => (type != null ? `spid-button-${type}` : ''))\n    .filter(Boolean);\n}\n\nconst emptyClasses: string[] = [];\nexport function computeButtonTransitionClasses({\n  type\n}: ModalState): { wrapper: string[]; icon: string[] } {\n  const inClass = 'in';\n  switch (type) {\n    case possibleStates.ENTERING.type:\n      return {\n        wrapper: ['spid-button-transition'],\n        icon: [buttonIconAnimationClass, inClass]\n      };\n    case possibleStates.ENTERED.type:\n      return {\n        wrapper: emptyClasses,\n        icon: [buttonIconAnimationClass, inClass]\n      };\n    case possibleStates.EXITING.type:\n      return {\n        wrapper: ['spid-button-reverse-enter-transition'],\n        icon: [buttonIconAnimationClass]\n      };\n    case possibleStates.EXITED.type:\n      return { wrapper: emptyClasses, icon: [buttonIconAnimationClass] };\n    case possibleStates.INIT.type:\n      return { wrapper: emptyClasses, icon: emptyClasses };\n  }\n}\n\nexport function isVisible(modalState: ModalState) {\n  return modalState.type.includes('enter');\n}\n","import React, { useRef, useEffect } from 'react';\n\nimport { isGetMethod } from './utils';\n\nimport type { TranslateFn } from './i18n';\nimport type { RegisteredProviderRecord, SPIDButtonProps, Types } from './types';\n\nimport styles from './ProviderButton.module.css';\n\ntype ProviderButtonProps = Required<\n  Pick<SPIDButtonProps, 'url' | 'mapping' | 'configuration' | 'type'>\n> &\n  Pick<SPIDButtonProps, 'onProviderClicked'> & {\n    idp: RegisteredProviderRecord;\n    isActive: boolean;\n    i18n: TranslateFn;\n    className: string;\n    firstFocus: boolean;\n  };\nexport const SharedProviderButton = ({\n  idp,\n  configuration,\n  url,\n  isActive,\n  mapping,\n  i18n,\n  onProviderClicked,\n  className,\n  type,\n  firstFocus\n}: ProviderButtonProps) => {\n  const idpRef = useRef<HTMLAnchorElement | HTMLButtonElement | null>(null);\n  const entityID =\n    idp.entityID in mapping ? mapping[idp.entityID] : idp.entityID;\n  const actionURL = url.replace('{{idp}}', encodeURIComponent(entityID));\n  const linkTitle = isActive\n    ? i18n('accedi_con_idp', idp.entityName)\n    : i18n('idp_disabled');\n\n  const loginURL = isActive ? actionURL : undefined;\n\n  useEffect(() => {\n    if (firstFocus && idpRef.current) {\n      idpRef.current.focus();\n    }\n  }, [idpRef]);\n\n  if (isGetMethod(configuration)) {\n    return (\n      <a\n        ref={(el) => (idpRef.current = el)}\n        title={linkTitle}\n        href={loginURL}\n        // @ts-expect-error\n        disabled={!isActive}\n        className={type === 'modal' ? '' : className}\n        onClick={(e) =>\n          onProviderClicked && onProviderClicked(idp, loginURL, e)\n        }\n        role='link'\n        id={entityID}\n      >\n        <ProviderButtonContent idp={idp} title={linkTitle} type={type} />\n      </a>\n    );\n  }\n  return (\n    <form name='spid_idp_access' action={actionURL} method='POST'>\n      <button\n        ref={(el) => (idpRef.current = el)}\n        className={className}\n        id={entityID}\n        name={linkTitle}\n        title={linkTitle}\n        type='submit'\n        onClick={(e) => {\n          if (!isActive) {\n            e.preventDefault();\n          }\n          return onProviderClicked && onProviderClicked(idp, loginURL, e);\n        }}\n        disabled={!isActive}\n      >\n        <ProviderButtonContent idp={idp} title={linkTitle} type={type} />\n      </button>\n      <input type='hidden' name={configuration.fieldName} value={entityID} />\n      {Object.entries(configuration.extraFields || {}).map(\n        ([inputName, inputValue]) => {\n          return (\n            <input\n              key={inputName}\n              type='hidden'\n              name={inputName}\n              value={inputValue}\n            />\n          );\n        }\n      )}\n    </form>\n  );\n};\n\nconst ProviderButtonContent = ({\n  idp,\n  title,\n  type\n}: {\n  idp: RegisteredProviderRecord;\n  title: string;\n  type: Types;\n}) => {\n  if (idp.logo == null) {\n    return <span>{idp.entityName}</span>;\n  }\n  return (\n    <span>\n      <span className={styles.srOnly}>{title}</span>\n      <img\n        src={idp.logo}\n        alt={idp.entityName}\n        title={idp.entityName}\n        style={type === 'modal' ? { maxWidth: '90%' } : {}}\n      />\n    </span>\n  );\n};\n","import React from 'react';\nimport { FocusOn } from 'react-focus-on';\n\nimport SpidLogoAnimationBlackUrl from '/../shared/svgs/spid-logo-animation-black.svg';\nimport SpidLogoUrl from '/../shared/svgs/spid-logo.svg';\nimport CloseSvgUrl from '/../shared/svgs/close.svg';\n\nimport type {\n  RegisteredProviderRecord,\n  SPIDButtonProps\n} from '../shared/types';\n\nimport {\n  BUTTON_DELAY_TIME,\n  DELAY_STEP,\n  emptyClass,\n  logoAnimationOutClass,\n  panelAnimClass,\n  possibleStates\n} from './constants';\nimport type { ModalState } from './types';\nimport { isProviderActive, SPID_URL } from '../shared/utils';\nimport { isVisible, getDefinedClasses } from './utils';\nimport { TranslateFn } from '../shared/i18n';\n\nimport { SharedProviderButton } from '../shared/ProviderButton';\n\nconst ButtonImage = ({ url, altText }: { url: string; altText: string }) => (\n  <img aria-hidden='true' src={url} alt={altText} style={{ float: 'left' }} />\n);\n\nfunction getModalClasses({ type }: ModalState) {\n  const fadeInLeftClass = 'spid-button-fade-in-left';\n  switch (type) {\n    case possibleStates.ENTERING.type:\n      return {\n        panel: panelAnimClass,\n        buttonLogo: fadeInLeftClass,\n        buttonClose: fadeInLeftClass\n      };\n    case possibleStates.EXITING.type:\n      return {\n        panel: panelAnimClass,\n        buttonManIcon: logoAnimationOutClass\n      };\n    case possibleStates.ENTERED.type:\n    case possibleStates.EXITED.type:\n    case possibleStates.INIT.type: {\n      return {};\n    }\n  }\n}\n\ntype ProvidersModalProps = Required<\n  Pick<\n    SPIDButtonProps,\n    | 'supported'\n    | 'protocol'\n    | 'url'\n    | 'mapping'\n    | 'configuration'\n    | 'extraProviders'\n  >\n> &\n  Pick<SPIDButtonProps, 'onProviderClicked'> & {\n    i18n: TranslateFn;\n    visibility: ModalState;\n    providers: RegisteredProviderRecord[];\n    closeModal: () => void;\n  };\nexport const ProvidersModal = ({\n  i18n,\n  mapping,\n  visibility,\n  extraProviders = [],\n  supported,\n  providers,\n  protocol,\n  url,\n  closeModal,\n  configuration,\n  onProviderClicked\n}: ProvidersModalProps) => {\n  const {\n    panel: panelClasses,\n    buttonClose: buttonCloseClasses,\n    buttonLogo: buttonLogoClasses,\n    buttonManIcon: buttonManIconClasses\n  } = getModalClasses(visibility);\n\n  return (\n    <FocusOn\n      onClickOutside={closeModal}\n      onEscapeKey={closeModal}\n      enabled={isVisible(visibility)}\n    >\n      <section\n        className={getDefinedClasses(['spid-enter-container'])}\n        hidden={!isVisible(visibility)}\n        aria-modal='true'\n      >\n        <div className={getDefinedClasses(['spid-enter'])}>\n          <section\n            className={getDefinedClasses([\n              'spid-button-panel',\n              'spid-button-panel-select',\n              panelClasses\n            ])}\n            aria-label={i18n('scegli_provider_SPID')}\n            tabIndex={0}\n          >\n            <header className={getDefinedClasses(['spid-button-header'])}>\n              <div className={getDefinedClasses(['spid-button-panel-back'])}>\n                <div\n                  className={getDefinedClasses([\n                    'spid-button-logo',\n                    buttonLogoClasses\n                  ])}\n                >\n                  <ButtonImage\n                    url={SpidLogoUrl}\n                    altText={i18n('alt_logo_SPID')}\n                  />\n                </div>\n                <div\n                  className={getDefinedClasses([\n                    'spid-button-close-button',\n                    'spid-button-fade-out-right',\n                    buttonCloseClasses\n                  ])}\n                >\n                  <button\n                    tabIndex={0}\n                    className={getDefinedClasses([\n                      'spid-button-panel-close-button',\n                      'spid-button-navigable'\n                    ])}\n                    aria-label={i18n('naviga_indietro')}\n                    onClick={closeModal}\n                  >\n                    <ButtonImage\n                      url={CloseSvgUrl}\n                      altText={i18n('naviga_indietro')}\n                    />\n                  </button>\n                </div>\n              </div>\n            </header>\n            <div className={getDefinedClasses(['spid-button-panel-content'])}>\n              <img\n                className={getDefinedClasses([\n                  'spid-button-little-man-icon',\n                  buttonManIconClasses\n                ])}\n                src={SpidLogoAnimationBlackUrl}\n                alt={i18n('entra_con_SPID')}\n              />\n              <div\n                className={getDefinedClasses([\n                  'spid-button-panel-content-center'\n                ])}\n              >\n                <h1\n                  className={getDefinedClasses([\n                    'spid-enter-title-page',\n                    'spid-button-fade-in-bottom',\n                    'spid-button-fade-out-bottom'\n                  ])}\n                >\n                  {i18n('scegli_provider_SPID')}\n                </h1>\n                <div className={getDefinedClasses(['spid-idp-list'])}>\n                  {providers.map((idp, i) => {\n                    const isActive = isProviderActive(\n                      idp,\n                      supported,\n                      protocol,\n                      extraProviders\n                    );\n                    const {\n                      classNames,\n                      style\n                    }: {\n                      classNames: string;\n                      style?: Record<string, string>;\n                    } =\n                      visibility.type === possibleStates.ENTERING.type\n                        ? {\n                            classNames: 'spid-button-idp-fade-in',\n                            style: {\n                              animationDelay: `${\n                                BUTTON_DELAY_TIME + DELAY_STEP * (i + 1)\n                              }s`\n                            }\n                          }\n                        : { classNames: emptyClass };\n\n                    return (\n                      <span\n                        key={idp.entityID}\n                        className={getDefinedClasses([\n                          'spid-button-idp',\n                          classNames\n                        ])}\n                        style={style}\n                      >\n                        <SharedProviderButton\n                          idp={idp}\n                          mapping={mapping}\n                          url={url}\n                          isActive={isActive}\n                          i18n={i18n}\n                          configuration={configuration}\n                          onProviderClicked={onProviderClicked}\n                          className={getDefinedClasses([\n                            'spid-button-idp-button'\n                          ])}\n                          type='modal'\n                          firstFocus={i === 0}\n                        />\n                      </span>\n                    );\n                  })}\n                </div>\n                <div className={getDefinedClasses(['spid-non-hai-spid'])}>\n                  {i18n('non_hai_SPID')}{' '}\n                  <a\n                    href={SPID_URL + '/richiedi-spid'}\n                    target='_blank noreferrer'\n                  >\n                    {i18n('scopri_di_piu')}\n                  </a>\n                </div>\n              </div>\n              <div className={getDefinedClasses(['spid-foot-btn'])}>\n                <button\n                  className={getDefinedClasses(['spid-cancel-access-button'])}\n                  onClick={closeModal}\n                >\n                  {i18n('annulla_accesso')}\n                </button>\n              </div>\n            </div>\n          </section>\n        </div>\n      </section>\n    </FocusOn>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport SpidIcoCircleLbUrl from '/../shared/svgs/spid-ico-circle-lb.svg';\nimport SpidIcoCircleBbUrl from '/../shared/svgs/spid-ico-circle-bb.svg';\n\nimport { getTranslationFn } from '../shared/i18n';\nimport {\n  computeButtonClasses,\n  computeButtonTransitionClasses,\n  isVisible,\n  getDefinedClasses\n} from './utils';\n\nimport { DEFAULT_TRANSITION_TIME, possibleStates } from './constants';\nimport {\n  mergeProviders,\n  validateURL,\n  getShuffledProviders\n} from '../shared/utils';\nimport { ProvidersModal } from './ProvidersModal';\n\nimport type { TranslateFn } from '../shared/i18n';\nimport type { SPIDButtonProps } from '../shared/types';\nimport type { ModalState } from './types';\n\nconst providersList = getShuffledProviders();\n\nconst LoginButton = ({\n  i18n,\n  theme,\n  corners,\n  fluid,\n  size,\n  toggleModal,\n  modalVisibility\n}: Pick<SPIDButtonProps, 'theme' | 'corners' | 'fluid' | 'size'> & {\n  i18n: TranslateFn;\n  modalVisibility: ModalState;\n  toggleModal: (prevState: boolean) => void;\n}) => {\n  const customStylingClasses = computeButtonClasses({\n    theme,\n    corners,\n    size,\n    fluid\n  });\n  const {\n    wrapper: wrapperTransitionClasses,\n    icon: iconButtonClasses\n  } = computeButtonTransitionClasses(modalVisibility);\n  const buttonImageUrl =\n    theme === 'negative' ? SpidIcoCircleLbUrl : SpidIcoCircleBbUrl;\n  return (\n    <button\n      className={getDefinedClasses([\n        'spid-button',\n        ...customStylingClasses,\n        ...wrapperTransitionClasses\n      ])}\n      onClick={() => toggleModal(true)}\n    >\n      <span\n        aria-hidden={!isVisible(modalVisibility)}\n        className={getDefinedClasses([\n          'spid-button-icon',\n          ...iconButtonClasses\n        ])}\n      >\n        <img\n          src={buttonImageUrl}\n          alt='Login logo'\n          className={getDefinedClasses(['spid-button-image-fix'])}\n        />\n      </span>\n      <span className={getDefinedClasses(['spid-button-text'])}>\n        {i18n('entra_con_SPID')}\n      </span>\n    </button>\n  );\n};\n\n/**\n * The specific component button with the modal.\n * Use this component when you want to minimize the footprint in your project.\n * It accepts the same props as the main component. The `type` prop is ignored in this case.\n *\n * @param props\n */\nexport const SPIDReactButton = ({\n  lang = 'it',\n  extraProviders = [],\n  corners = 'rounded',\n  fluid = true,\n  size = 'md',\n  theme = 'positive',\n  configuration = { method: 'GET' },\n  mapping = {},\n  protocol = 'SAML',\n  url,\n  sorted = false,\n  supported = providersList.map(({ entityID }) => entityID),\n  onProvidersShown,\n  onProvidersHidden,\n  onProviderClicked\n}: SPIDButtonProps) => {\n  const [state, setState] = useState<ModalState>(possibleStates.INIT);\n\n  useEffect(() => {\n    if (state.type === possibleStates.ENTERING.type) {\n      if (onProvidersShown) {\n        onProvidersShown();\n      }\n    }\n    if (state.type === possibleStates.EXITING.type) {\n      if (onProvidersHidden) {\n        onProvidersHidden();\n      }\n    }\n  }, [state]);\n\n  useEffect(() => {\n    let timer: NodeJS.Timeout;\n    if (state.type === possibleStates.ENTERING.type) {\n      timer = setTimeout(\n        () => setState(possibleStates.ENTERED),\n        DEFAULT_TRANSITION_TIME\n      );\n    }\n    if (state.type === possibleStates.EXITING.type) {\n      timer = setTimeout(\n        () => setState(possibleStates.EXITED),\n        DEFAULT_TRANSITION_TIME\n      );\n    }\n    return () => {\n      if (timer != null) {\n        clearTimeout(timer);\n      }\n    };\n  }, [state]);\n\n  validateURL(url);\n\n  const translateFn = getTranslationFn(lang);\n\n  const moreLoginProps = {\n    theme,\n    corners,\n    fluid,\n    size\n  };\n\n  const moreModalProps = {\n    extraProviders,\n    configuration,\n    url,\n    mapping,\n    protocol,\n    supported,\n    onProviderClicked\n  };\n\n  const mergedProviders = mergeProviders(providersList, extraProviders, {\n    sorted\n  });\n\n  return (\n    <div aria-live='polite'>\n      <ProvidersModal\n        visibility={state}\n        i18n={translateFn}\n        providers={mergedProviders}\n        closeModal={() => setState(possibleStates.EXITING)}\n        {...moreModalProps}\n      />\n      <LoginButton\n        modalVisibility={state}\n        i18n={translateFn}\n        toggleModal={(open: boolean) =>\n          setState(open ? possibleStates.ENTERING : possibleStates.EXITING)\n        }\n        {...moreLoginProps}\n      />\n    </div>\n  );\n};\n","export const sizeMapping = {\n  sm: 'small',\n  md: 'medium',\n  l: 'large',\n  xl: 'extraLarge'\n} as const;\n","import { sizeMapping } from './constants';\n\nimport type { Sizes } from '../shared/types';\n\nexport const getButtonSizeClass = (size: Sizes | 'xl') => {\n  return sizeMapping[size];\n};\n\nexport const getIdpButtonSizeClass = (size: Sizes | 'xl') => {\n  const currentSize = sizeMapping[size];\n  return 'idpButton' + currentSize[0].toUpperCase() + currentSize.slice(1);\n};\n","import React from 'react';\n\nimport { isProviderActive, SPID_URL } from '../shared/utils';\nimport { getIdpButtonSizeClass } from './util';\n\nimport type { TranslateFn } from '../shared/i18n';\nimport type {\n  RegisteredProviderRecord,\n  SPIDButtonProps\n} from '../shared/types';\n\nimport styles from './index.module.css';\nimport { SharedProviderButton } from '../shared/ProviderButton';\n\ntype ProvidersDropdownProps = Required<\n  Pick<\n    SPIDButtonProps,\n    | 'url'\n    | 'supported'\n    | 'mapping'\n    | 'size'\n    | 'configuration'\n    | 'protocol'\n    | 'extraProviders'\n  >\n> &\n  Pick<SPIDButtonProps, 'onProviderClicked'> & {\n    i18n: TranslateFn;\n    providers: RegisteredProviderRecord[];\n  };\nexport const ProvidersDropdown = ({\n  configuration,\n  supported,\n  url,\n  mapping,\n  i18n,\n  size,\n  protocol,\n  providers,\n  extraProviders,\n  onProviderClicked\n}: ProvidersDropdownProps) => {\n  return (\n    <div\n      className={`${styles.idpButton} ${styles.idpButtonTip} ${\n        styles[getIdpButtonSizeClass(size)]\n      }`}\n      aria-modal='true'\n    >\n      <ul\n        className={styles.idpButtonMenu}\n        aria-label={i18n('scegli_provider_SPID')}\n      >\n        {providers.map((idp, i) => {\n          const isActive = isProviderActive(\n            idp,\n            supported,\n            protocol,\n            extraProviders\n          );\n\n          const buttonClasses = `${styles.idpLogo} ${\n            isActive ? '' : styles.disabled\n          }`;\n          return (\n            <li data-idp={idp.entityName} key={idp.entityName}>\n              <SharedProviderButton\n                idp={idp}\n                url={url}\n                isActive={isActive}\n                mapping={mapping}\n                i18n={i18n}\n                configuration={configuration}\n                onProviderClicked={onProviderClicked}\n                className={buttonClasses}\n                type='dropdown'\n                firstFocus={i === 0}\n              />\n            </li>\n          );\n        })}\n        <li className={styles.supportLink}>\n          <a href={SPID_URL} target='_blank noreferrer'>\n            {i18n('maggiori_info')}\n          </a>\n        </li>\n        <li className={styles.supportLink}>\n          <a href={SPID_URL + '/#registrati'} target='_blank noreferrer'>\n            {i18n('non_hai_SPID')}\n          </a>\n        </li>\n      </ul>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { FocusOn } from 'react-focus-on';\n\nimport SpidIcoCircleBbUrl from '/../shared/svgs/spid-ico-circle-bb.svg';\nimport SpidIcoCircleLbUrl from '/../shared/svgs/spid-ico-circle-lb.svg';\nimport { getTranslationFn } from '../shared/i18n';\nimport { SPIDButtonProps } from '../shared/types';\nimport {\n  validateURL,\n  getShuffledProviders,\n  mergeProviders\n} from '../shared/utils';\n\nimport styles from './index.module.css';\nimport { ProvidersDropdown } from './ProvidersMenu';\nimport { getButtonSizeClass } from './util';\n\nconst shuffledProviders = getShuffledProviders();\n/**\n * The specific component button with the dropdown.\n * Use this component when you want to minimize the footprint in your project.\n * It accepts the same props as the main component. The `type` prop is ignored in this case.\n *\n * @param props\n */\nexport const SPIDReactButton = ({\n  url,\n  lang = 'it',\n  supported = shuffledProviders.map(({ entityID }) => entityID),\n  mapping = {},\n  size = 'md',\n  configuration = { method: 'GET' },\n  theme = 'positive',\n  protocol = 'SAML',\n  sorted = false,\n  extraProviders = [],\n  onProviderClicked,\n  onProvidersHidden,\n  onProvidersShown\n}: SPIDButtonProps) => {\n  const [openDropdown, toggleDropdown] = useState<boolean | undefined>(\n    undefined\n  );\n\n  const i18n = getTranslationFn(lang);\n\n  useEffect(() => {\n    if (openDropdown && onProvidersShown) {\n      onProvidersShown();\n    }\n    if (openDropdown === false && onProvidersHidden) {\n      onProvidersHidden();\n    }\n  }, [openDropdown]);\n\n  validateURL(url);\n\n  const mergedProviders = mergeProviders(shuffledProviders, extraProviders, {\n    sorted\n  });\n\n  const buttonImageUrl =\n    theme === 'negative' ? SpidIcoCircleLbUrl : SpidIcoCircleBbUrl;\n\n  return (\n    <FocusOn\n      onClickOutside={() => toggleDropdown(false)}\n      onEscapeKey={() => toggleDropdown(false)}\n      scrollLock={false}\n      enabled={openDropdown}\n    >\n      <div className={styles.container}>\n        <a\n          href='#'\n          className={`${styles.button} ${styles[getButtonSizeClass(size)]} ${\n            theme === 'positive' ? styles.theme : styles.themeNegative\n          }`}\n          aria-haspopup='true'\n          aria-expanded={openDropdown}\n          onClick={() => toggleDropdown(!openDropdown)}\n        >\n          <span className={styles.buttonIcon}>\n            <img src={buttonImageUrl} alt='Login logo' />\n          </span>\n          <span className={styles.buttonText}>{i18n('entra_con_SPID')}</span>\n        </a>\n        {openDropdown && (\n          <ProvidersDropdown\n            supported={supported}\n            url={url}\n            mapping={mapping}\n            i18n={i18n}\n            size={size}\n            configuration={configuration}\n            protocol={protocol}\n            providers={mergedProviders}\n            extraProviders={extraProviders}\n            onProviderClicked={onProviderClicked}\n          />\n        )}\n      </div>\n    </FocusOn>\n  );\n};\n","import React from 'react';\n\nimport { SPIDReactButton as SPIDReactButtonModal } from './modalVariant';\nimport { SPIDReactButton as SPIDReactButtonDropdown } from './dropdownVariant';\nimport type { SPIDButtonProps } from './shared/types';\n/**\n * The main component for the button.\n * Use this component with the `type` prop to select the version you prefer.\n * @param props\n */\nexport const SPIDReactButton = (props: SPIDButtonProps) => {\n  if (!props.type || props.type === 'modal') {\n    return <SPIDReactButtonModal {...props} />;\n  }\n  return <SPIDReactButtonDropdown {...props} />;\n};\n","import React from 'react'\n\nimport {  Header, HeaderContent, HeaderBrand, HeaderRightZone, HeaderSocialsZone, Icon } from 'design-react-kit';\n\nexport const AppHeader = () => (<Header\n    type=\"center\"\n  >\n    <HeaderContent>\n      <HeaderBrand\n        iconName=\"it-code-circle\"\n        tag=\"a\"\n      >\n        <h2>\n          SPID React button\n    </h2>\n        <h3>\n          The React component for the SPID smart button\n    </h3>\n      </HeaderBrand>\n      <HeaderRightZone>\n        <HeaderSocialsZone>\n          <ul>\n            <li>\n              <a\n                aria-label=\"Github\"\n                href=\"https://github.com/dej611/spid-react-button\"\n                target=\"_blank noreferrer\"\n              >\n                <Icon\n                  color=\"\"\n                  icon=\"it-github\"\n                  padding={false}\n                  size=\"\"\n                />\n              </a>\n            </li>\n          </ul>\n        </HeaderSocialsZone>\n      </HeaderRightZone>\n    </HeaderContent>\n  </Header>)","import { getShuffledProviders } from \"@dej611/spid-react-button\";\n\nimport {Protocols, Languages, Sizes, CornerType, ColorTheme, ConfigurationGET, ConfigurationPOST, Types, SPIDButtonProps, getSupportedLanguages} from '@dej611/spid-react-button'\n\nexport const defaultURL = \"/myLogin/idp={{idp}}\";\nexport const providersList = [...getShuffledProviders()].sort((idpA, idpB) => idpA.entityName.localeCompare(idpB.entityName));\nexport const languages: Languages[] = getSupportedLanguages()\nexport const configurations: [ConfigurationGET, ConfigurationPOST] = [{ method: 'GET' }, { method: 'POST', fieldName: 'prova' }]\nexport const protocols: Protocols[] = ['SAML', 'OIDC']\nexport const sizes: Sizes[] = ['sm', 'md', 'l']\nexport const colorThemes: ColorTheme[] = ['positive', 'negative']\nexport const cornerTypes: CornerType[] = ['rounded', 'sharp']\nexport const types: Types[] = ['modal', 'dropdown']\n\n\nexport type NoFunctionProps = Required<Omit<SPIDButtonProps, 'onProvidersShown' | 'onProvidersHidden' | 'onProviderClicked'>>\n\nexport const initState: NoFunctionProps = {\n    lang: languages[0],\n    url: defaultURL,\n    mapping: {},\n    supported: providersList.slice(0, 4).map(({entityID}) => entityID),\n    protocol: protocols[0],\n    size: sizes[1],\n    theme: colorThemes[0],\n    fluid: false,\n    corners: cornerTypes[0],\n    configuration: configurations[0],\n    extraProviders: [],\n    type: types[0],\n    sorted: false\n  }","import React from 'react';\nimport Select, { components } from 'react-select'\nimport { Icon } from 'design-react-kit';\n\nconst Option = (props: any) => {\n  return (\n    <div className=\"select-pill text-primary\">\n      <components.Option {...props} />\n    </div>\n  )\n}\n\nconst DropdownIndicator = (props: any) => {\n  return (\n    <components.DropdownIndicator {...props}>\n      <Icon icon=\"it-arrow-down-triangle\" aria-hidden={true} />\n    </components.DropdownIndicator>\n  )\n}\n\ntype SelectProps<T> = {\n  options: {value: T, label: string}[]\n  onChange: (selectedOption: {label: string, value: T} | null) => void,\n  label: string,\n  selectedValue: {value: T, label: string}\n};\n\nlet counter = 0;\nconst generatedIds = {};\nconst idGenerator = (label: string): string => {\n  generatedIds[label] = generatedIds[label] || `selectExampleClassic-${counter}`;\n  return generatedIds[label];\n}\n\nexport function SelectComponent<T = unknown>({options, onChange, label, selectedValue}: SelectProps<T>) {\n  return (\n    <div className=\"bootstrap-select-wrapper\">\n      <label htmlFor={idGenerator(label)}>{label}</label>\n      <Select\n        components={{\n          Option,\n          DropdownIndicator,\n          IndicatorSeparator: null\n        }}\n        styles={{\n          container: provided => ({ ...provided, height: '2.5rem' }),\n          valueContainer: provided => ({ ...provided, height: '2.5rem' }),\n          control: provided => ({ ...provided, height: '2.5rem' })\n        }}\n        id={idGenerator(label)}\n        onChange={onChange}\n        options={options}\n        placeholder={label}\n        aria-label={label}\n        classNamePrefix=\"react-select\"\n        value={selectedValue}\n      />\n    </div>\n  )\n}","import React from 'react';\n\nimport { SPIDButtonProps } from '@dej611/spid-react-button'\n// @ts-expect-error\nimport { Input, Col, Row, Toggle, FormGroup, Label } from 'design-react-kit';\nimport { SelectComponent } from './BISelect';\nimport { colorThemes, configurations, cornerTypes, languages, NoFunctionProps, protocols, providersList, sizes, types } from './constants';\n\nfunction getOptionsAndCurrentSelection<T>(labels: string[], options: T[], currentState: SPIDButtonProps, prop: keyof SPIDButtonProps) {\n  const outputOptions = labels.map(\n    (label, i) => ({ label, value: options[i] })\n  );\n  // @ts-expect-error\n  const currentSelection = outputOptions.find(({ value }) => value === currentState[prop])\n  return { options: outputOptions, selection: currentSelection! }\n}\n\ntype ConfiguratorProps = {\n  buttonProps: NoFunctionProps,\n  updateProp: <T extends keyof NoFunctionProps>(prop: T, newValue: NoFunctionProps[T]) => void,\n  setValidURL: (newValue: boolean) => void,\n  isValidURL: boolean\n}\n\nexport const Configurator = ({ buttonProps, updateProp, setValidURL, isValidURL }: ConfiguratorProps) => {\n\n\n  const { options: langOptions, selection: langSelection } = getOptionsAndCurrentSelection(['Italiano', 'English', 'Deutsche', 'Spagnolo', 'Francese'], languages, buttonProps, 'lang')\n  const { options: sizeOptions, selection: sizeSelection } = getOptionsAndCurrentSelection(['Small', 'Medium', 'Large'], sizes, buttonProps, 'size')\n  const { options: colorSchemeOptions, selection: colorThemeSelection } = getOptionsAndCurrentSelection(['Positive', 'Negative'], colorThemes, buttonProps, 'theme')\n  const { options: protocolOptions, selection: protocolSelection } = getOptionsAndCurrentSelection(['SAML', 'OIDC'], protocols, buttonProps, 'protocol')\n  const { options: cornerTypeOptions, selection: cornerTypeSelection } = getOptionsAndCurrentSelection(['Rounded', 'Sharp'], cornerTypes, buttonProps, 'corners')\n  const { options: methodOptions, selection: methodSelection } = getOptionsAndCurrentSelection(['GET', 'POST'], configurations, buttonProps, 'configuration')\n  const { options: typeOptions, selection: typeSelection } = getOptionsAndCurrentSelection(['Modal', 'Dropown'], types, buttonProps, 'type')\n\n  const validProps = isValidURL ? { valid: true } : { invalid: true }\n  return <>\n    <div className=\"form-row\">\n      <Col md={6}>\n        <Input\n          label={\"URL - must contain '{{idp}}':\"}\n          placeholder='Add a URL'\n          value={buttonProps.url}\n          {...validProps}\n          infoText={isValidURL ? '' : 'Please add the \"{{idp}}\" string in it'}\n          onChange={(event) => {\n            // @ts-expect-error\n            const newURL = event.target.value;\n            setValidURL(newURL.indexOf('{{idp}}') > -1);\n            updateProp('url', newURL);\n          }}\n        />\n      </Col>\n      <Col>\n        <FormGroup className=\"m-8\">\n          <SelectComponent\n            label='Method:'\n            selectedValue={methodSelection}\n            options={methodOptions}\n            onChange={(selectedOption) => {\n              if (selectedOption != null && configurations.includes(selectedOption.value)) {\n                updateProp('configuration', selectedOption.value)\n              }\n            }}\n          />\n        </FormGroup>\n      </Col>\n    </div>\n    <div className=\"form-row\">\n      <Col md={6}>\n        <FormGroup className=\"m-8\">\n          <SelectComponent\n            label='Language:'\n            selectedValue={langSelection}\n            options={langOptions}\n            onChange={(selectedOption) => {\n              if (selectedOption != null && languages.includes(selectedOption.value)) {\n                updateProp('lang', selectedOption.value)\n              }\n            }}\n          />\n        </FormGroup>\n      </Col>\n      <Col md={6}>\n        <FormGroup className=\"m-8\">\n          <SelectComponent\n            label='Size:'\n            selectedValue={sizeSelection}\n            options={sizeOptions}\n            onChange={(selectedOption) => {\n              if (selectedOption != null && sizes.includes(selectedOption.value)) {\n                updateProp('size', selectedOption.value)\n              }\n            }}\n          />\n        </FormGroup>\n      </Col>\n    </div>\n    <div className=\"form-row\">\n      <Col md={6}>\n        <FormGroup className=\"m-8\">\n          <SelectComponent\n            label='Theme:'\n            selectedValue={colorThemeSelection}\n            options={colorSchemeOptions}\n            onChange={(selectedOption) => {\n              if (selectedOption != null && colorThemes.includes(selectedOption.value)) {\n                updateProp('theme', selectedOption.value)\n              }\n            }}\n          />\n        </FormGroup>\n      </Col>\n      <Col md={6}>\n        <FormGroup className=\"m-8\">\n          <SelectComponent\n            label='Corners style:'\n            selectedValue={cornerTypeSelection}\n            options={cornerTypeOptions}\n            onChange={(selectedOption) => {\n              if (selectedOption != null && cornerTypes.includes(selectedOption.value)) {\n                updateProp('corners', selectedOption.value)\n              }\n            }}\n          />\n        </FormGroup>\n      </Col>\n    </div>\n    <div className=\"form-row\">\n      <Col>\n        <FormGroup check>\n          <Toggle\n            label='Fluid'\n            checked={buttonProps.fluid}\n            onChange={({ target }) => {\n              // @ts-expect-error\n              updateProp('fluid', target.checked)\n            }}\n          />\n        </FormGroup>\n      </Col>\n      <Col md={4}>\n        <FormGroup className=\"m-8\">\n        <SelectComponent\n          label='Type'\n          selectedValue={typeSelection}\n          options={typeOptions}\n          onChange={(selectedOption) => {\n            if (selectedOption != null && types.includes(selectedOption.value)) {\n              updateProp('type', selectedOption.value)\n            }\n          }}\n        />\n        </FormGroup>\n      </Col>\n      <Col md={4}>\n        <FormGroup className=\"m-8\">\n        <SelectComponent\n          label='Protocol'\n          selectedValue={protocolSelection}\n          options={protocolOptions}\n          onChange={(selectedOption) => {\n            if (selectedOption != null && protocols.includes(selectedOption.value)) {\n              updateProp('protocol', selectedOption.value)\n            }\n          }}\n        />\n        </FormGroup>\n      </Col>\n    </div>\n    <Row>\n      <Col md={6}>\n      <fieldset>\n        <legend>Provider supported:</legend>\n        <FormGroup check>\n          {providersList.map(({ entityID, entityName, logo }) => <div key={entityName}>\n            <Input id={entityName} type=\"checkbox\" checked={buttonProps.supported.includes(entityID)} onChange={(event) => {\n              // @ts-expect-error\n              const isChecked = event.target.checked;\n              if (isChecked) {\n                updateProp('supported', [...buttonProps.supported, entityID])\n              } else {\n                updateProp('supported', buttonProps.supported.filter((id) => entityID !== id))\n              }\n            }} />\n            <Label htmlFor={entityName} check>\n              <img src={logo} alt={entityName} height={20} />\n            </Label>\n          </div>\n          )}\n        </FormGroup>\n      </fieldset>\n      </Col>\n      <Col>\n        <FormGroup check>\n          <Toggle\n            label='Providers sorted'\n            checked={buttonProps.sorted}\n            onChange={({ target }) => {\n              // @ts-expect-error\n              updateProp('sorted', target.checked)\n            }}\n          />\n        </FormGroup>\n      </Col>\n    </Row>\n  </>\n}","import React from 'react';\n\nexport const EventsTable = ({ events }: { events: { type: string, name: string, arg?: string }[] }) => {\n  return <div className=\"tableFixHead\">\n    <table className=\"table table-hover\">\n      <thead>\n        <tr>\n          <th scope=\"col\">#</th>\n          <th scope=\"col\">Type</th>\n          <th scope=\"col\">Event</th>\n          <th scope=\"col\">Arg</th>\n        </tr>\n      </thead>\n      <tbody>\n        {events.map(({ type, name, arg }, i) => <tr key={name + i}>\n          <th scope=\"row\">{events.length - i}</th>\n          <td>{type}</td>\n          <td>{name}</td>\n          <td>{arg || ''}</td>\n        </tr>)}\n\n      </tbody>\n    </table>\n  </div>\n}","import React from 'react';\nimport { Button, Icon } from 'design-react-kit';\n\nconst htmlTemplate = `<div id=\"root\"></div>`\n\nconst indexTemplate = `\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n`\n\nfunction makePartOfApp(code: string){\n  return `\nimport React from \"react\";\n${code.replace('function', 'export default function')}\n`\n}\n\nexport const CodeEditorLink = ({ code }: { code: string }) => {\n  return (\n  <form method=\"post\" action=\"https://stackblitz.com/run\" target=\"_blank\">\n    <input type=\"hidden\" name=\"project[title]\" value=\"spid-react-button-example\" />\n    <input type=\"hidden\" name=\"project[files][public/index.html]\" value={htmlTemplate} />\n    <input type=\"hidden\" name=\"project[files][src/App.js]\" value={makePartOfApp(code)} />\n    <input type=\"hidden\" name=\"project[files][src/index.js]\" value={indexTemplate} />\n    <input type=\"hidden\" name=\"project[tags][]\" value=\"react\" />\n    <input type=\"hidden\" name=\"project[tags][]\" value=\"spid\" />\n    <input type=\"hidden\" name=\"project[tags][]\" value=\"spid-button\" />\n    <input type=\"hidden\" name=\"project[description]\" value=\"SPID React button example starter project\" />\n    <input type=\"hidden\" name=\"project[dependencies]\" value={`{\n      \"react\": \"17.0.2\",\n      \"react-dom\": \"17.0.2\",\n      \"react-scripts\": \"4.0.0\",\n      \"@dej611/spid-react-button\": \"latest\",\n      \"typeface-titillium-web\": \"latest\"\n    }`} />\n    <input type=\"hidden\" name=\"project[template]\" value=\"create-react-app\" />\n    <Button\n      color=\"link\"\n      icon\n      tag=\"button\"\n      className=\"float-right\"\n    >\n      <Icon icon=\"it-software\" />\n      Open it in Stackblitz\n    </Button>\n  </form>\n  )\n}","import React from 'react';\nimport { PrismLight as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport jsx from 'react-syntax-highlighter/dist/esm/languages/prism/jsx';\nimport css from 'react-syntax-highlighter/dist/esm/languages/prism/css';\nimport bash from 'react-syntax-highlighter/dist/esm/languages/prism/bash';\nimport {vs} from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport { CodeEditorLink } from './CodeEditor';\n\nimport { initState, NoFunctionProps } from './constants';\n\nSyntaxHighlighter.registerLanguage('jsx', jsx);\nSyntaxHighlighter.registerLanguage('css', css);\nSyntaxHighlighter.registerLanguage('bash', bash);\n\nfunction isDefaultProp(prop: string, value: unknown) {\n    if (prop === 'url') {\n        return false;\n    }\n    if (Array.isArray(value)) {\n        return value.length === initState[prop].length &&\n            initState[prop].every((v: unknown, i: number) => v === value[i]);\n    }\n    return initState[prop] === value;\n}\n\nexport const CodeRenderer = (buttonProps: NoFunctionProps) => {\n    const entries = Object.entries(buttonProps);\n    const code = `\nimport { SPIDReactButton } from '@dej611/spid-react-button';\nimport 'typeface-titillium-web';\nimport '@dej611/spid-react-button/dist/index.css';\n\nfunction mySPIDButton(props){\n    return (\n        <SPIDReactButton \n            ${entries\n            .filter(([prop, value]) => !isDefaultProp(prop, value))\n            .map(([prop, value]) => `${prop}={${JSON.stringify(value, null, 2)}}`)\n            .join('\\n            ')}\n        />\n    );\n}`;\n\n    return <div><SyntaxHighlighter language=\"javascript\" showLineNumbers\n\n        wrapLines style={vs}>\n        {code}\n    </SyntaxHighlighter>\n    <CodeEditorLink code={code}/>\n    </div>\n}\n\nexport const GenericCodeRenderer = ({code, lang} : {code: string, lang: 'css' | 'bash'}) => {\n    return <SyntaxHighlighter language={lang}\n\n        wrapLines style={vs}>\n        {code}\n    </SyntaxHighlighter>\n}\n","import React, { useEffect , useState} from 'react';\nimport Markdown from 'markdown-to-jsx';\n// @ts-expect-error\nimport {Puff} from 'svg-loaders-react';\nimport { CodeRenderer, GenericCodeRenderer } from './CodeRenderer';\nimport { NoFunctionProps } from './constants';\n\n\nconst docURL = process.env.PUBLIC_URL + \"/doc.md\";\n\nconst possibleStates = {\n    'init': {state: 'init'},\n    'loaded': {state: 'loaded', payload: '' as string},\n    'error': {state: 'error'}\n} as const;\n\ntype LoadingStates = keyof typeof possibleStates;\ntype StatesValues = (typeof possibleStates)[LoadingStates]\n\nconst wait = (ms: number) => new Promise(r => setTimeout(r, ms))\n\nexport const DocTable = (buttonProps: NoFunctionProps) => {\n    const [doc, setDoc] = useState<StatesValues>(possibleStates.init);\n\n    useEffect(() => {\n        Promise.all([\n            fetch(docURL)\n                .then((response) => response.text()),\n                wait(1500)\n        ])\n            .then(([markdown]) => setDoc({\n                ...possibleStates.loaded, payload: markdown\n            }))\n            .catch(() => setDoc(possibleStates.error))\n    }, [setDoc]);\n\n    const npmInstallLine = 'npm install --save @dej611/spid-react-button typeface-titillium-web';\n    const cssImportLine = '@import url(https://fonts.googleapis.com/css?family=Titillium+Web:400,600,700,900);';\n    return <div>\n        <h1>Getting started</h1>\n        <GenericCodeRenderer code={npmInstallLine} lang='bash' />\n        \n        The package depends on the Titillium font.\n\n        An alternative to installing the local package is to use it via CDN, adding this line to your css file:\n\n        <GenericCodeRenderer code={cssImportLine} lang='css' />\n        \n        <a href=\"https://github.com/dej611/spid-react-button\" target=\"_blank noreferrer\">Github repository</a>\n        <h1>Reference API</h1>\n        <CodeRenderer {...buttonProps} url={buttonProps.url} />\n        {doc.state === 'init' && <Puff stroke=\"#0073e6\" strokeOpacity=\".5\"/>}\n        {\n            doc.state === 'loaded' \n                ? <Markdown>{doc.payload}</Markdown>\n                : null\n        }\n        {doc.state === 'error' && <p>\n            An error occurred when loading the documentation from the server\n            </p>}\n    </div>\n}","import React, { useState, useCallback } from 'react'\n\nimport { SPIDReactButton, SPIDButtonProps, ProviderRecord } from '@dej611/spid-react-button'\nimport 'bootstrap-italia/dist/css/bootstrap-italia.min.css';\nimport 'typeface-titillium-web';\nimport 'typeface-roboto-mono';\nimport 'typeface-lora';\n\n\nimport '@dej611/spid-react-button/dist/index.css';\n\n// @ts-expect-error\nimport { Col, Row, Container } from 'design-react-kit';\n\nimport { AppHeader } from './Header';\nimport { defaultURL, initState } from './constants';\nimport { Configurator } from './Configurator';\nimport { EventsTable } from './EventsTable';\nimport { DocTable } from './DocTable';\n\nconst App = () => {\n  const [buttonProps, setProps] = useState(initState);\n\n  const [isValidURL, setValidURL] = useState(true);\n  const [events, setEvents] = useState<{ type: string, name: string, arg?: string }[]>([]);\n\n  const updateStateProp = useCallback(\n    <T extends keyof SPIDButtonProps>(prop: T, newValue: SPIDButtonProps[T]) => {\n      return setProps(prevState => ({ ...prevState, [prop]: newValue }))\n    }, [setProps]);\n\n  const prependEvent = useCallback((newEvent) => {\n    setEvents((events) => [newEvent, ...events]);\n  }, [setEvents])\n\n  return <>\n    <AppHeader />\n    <section id=\"main\">\n      <Container tag=\"div\">\n        <Row>\n          <Col md=\"6\">\n            <Row>\n              <Col>\n                <legend>{(buttonProps.type).toUpperCase()} version</legend>\n                <SPIDReactButton\n                  {...buttonProps}\n                  url={isValidURL ? buttonProps.url : defaultURL}\n                  onProvidersShown={() => prependEvent({ type: buttonProps.type, name: 'onProvidersShown' })}\n                  onProvidersHidden={() => prependEvent({ type: buttonProps.type, name: 'onProvidersHidden' })}\n                  onProviderClicked={(arg: ProviderRecord, url: string | undefined, e) => {\n                    e.preventDefault();\n                    prependEvent({ type: buttonProps.type, name: 'onProvidersClicked', arg: JSON.stringify({url, arg}, null, 2) })\n                  }}\n                />\n                <EventsTable events={events} />\n              </Col>\n            </Row>\n          </Col>\n          <Col>\n            <Configurator updateProp={updateStateProp} setValidURL={setValidURL} isValidURL={isValidURL} buttonProps={buttonProps} />\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <Row><h1>F.A.Q.</h1></Row>\n            <Row>\n              <p><strong>X kb (gzipped) is too much for my project! Is it possible to treeshake it?</strong></p>\n            </Row>\n            <Row>\n              <p>Yes. If you know already you're going to use only one type of button, you can just pick it: just import <code>SPIDReactButtonModal</code> or <code>SPIDReactButtonDropdown</code> and experice full treeshake.</p>\n            </Row>\n            <Row>\n              <p><strong>Is this project official?</strong></p>\n            </Row>\n            <Row>\n              <p>No, this is not an official project.</p>\n            </Row>\n            <Row>\n              <p><strong>Is the providers list official?</strong></p>\n            </Row>\n            <Row>\n              <p>No, as this is not an official project, the list may not be super up-to-date (we check pretty often tho). This official list of SPID providers is avilable <a href=\"https://github.com/italia/spid-sp-access-button\" target=\"_blank noreferrer\">here</a></p>\n            </Row>\n            <Row>\n              <p><strong>Where the modal version comes from? Is that official?</strong></p>\n            </Row>\n            <Row>\n              <p>The modal version of this component comes from these other project <a href=\"https://github.com/italia/spid-smart-button\" target=\"_blank noreferrer\">spid-smart-button</a></p>\n            </Row>\n            <Row>\n              <p><strong>Does this component goes in conflict with the <code>design-react-kit</code>?</strong></p>\n            </Row>\n            <Row>\n              <p>No. This page was in fact built using components from the <code>design-react-kit</code>. If you find any conflicting issue with it, please report it to this repository.</p>\n            </Row>\n            <Row>\n              <p><strong>Why did you write all of this in English rather than Italian?</strong></p>\n            </Row>\n            <Row>\n              <p>I guess I've started it in English and just finished it. As open source project PR are very welcome, expecially for translations!</p>\n            </Row>\n            <Row>\n              <p><strong>Does the project have Typescript types?</strong></p>\n            </Row>\n            <Row>\n              <p>Yes, they are in the package. The API documentation is automatically extracted from types.</p>\n            </Row>\n            <Row>\n              <p><strong>Can I contribute somehow to the project?</strong></p>\n            </Row>\n            <Row>\n              <p>Of course you can, glad you've asked. You can report bugs or issues with the project to start with at this repository, or even enhance it with a PR!</p>\n            </Row>\n            <Row>\n              <p><strong>What's the license of this project?</strong></p>\n            </Row>\n            <Row>\n              <p>EUPL 1.2, European Union Public Licence V. 1.2</p>\n            </Row>\n          </Col>\n        </Row>\n      </Container>\n    </section>\n    <section id=\"api\">\n      <Container>\n        <Row>\n          <Col>\n            <DocTable {...buttonProps} url={isValidURL ? buttonProps.url : defaultURL} />\n          </Col>\n        </Row>\n      </Container>\n    </section>\n    <footer className=\"it-footer\">\n\n      <div className=\"it-footer-main\">\n        <Container tag=\"div\">\n          <h5>Note</h5>\n          <p>All logos of each Identity Provider is a registered trademark of their respective owners</p>\n          <p>The SPID logo is a registered trademark of AGID, Agenzia per l'Italia Digitale della Presidenza del Consiglio dei Ministri</p>\n        </Container></div>\n      <div className=\"it-footer-small-prints clearfix\">\n        <Container tag=\"div\">\n\n        </Container>\n      </div>\n    </footer>\n  </>\n}\nexport default App\n","import 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\nimport './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}